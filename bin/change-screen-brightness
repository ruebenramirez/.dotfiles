#!/usr/bin/env python3

from abc import ABC, abstractmethod
import click
import subprocess

class BrightnessDriver(ABC):
    @staticmethod
    @abstractmethod
    def is_available():
        raise NotImplementedError()

    @staticmethod
    @abstractmethod
    def get_brightness():
        raise NotImplementedError()

    @staticmethod
    @abstractmethod
    def increase_brightness():
        raise NotImplementedError()

    @staticmethod
    @abstractmethod
    def decrease_brightness():
        raise NotImplementedError()

    @staticmethod
    @abstractmethod
    def max_brightness():
        raise NotImplementedError()

    @staticmethod
    @abstractmethod
    def min_brightness():
        raise NotImplementedError()


class LightDriver(BrightnessDriver):
'''Manages laptop's built in display brightness via the `light` utility.'''

    @staticmethod
    def is_available():
        return True

    @staticmethod
    def get_brightness():
        degrees = float(subprocess.run(["light"], stdout=subprocess.PIPE).stdout)
        return degrees

    @staticmethod
    def set_brightness(degrees):
        subprocess.run(["light", "-S", degrees])


    @staticmethod
    def print_brightness():
        degrees = LightDriver.get_brightness()
        click.echo("current brightness {d} degrees".format(d=degrees))

    @staticmethod
    def increase_brightness(degrees):
        target_brightness = LightDriver.get_brightness() + degrees
        if target_brightness > 100:
            click.echo("not allowing > 100 LightDriver brightness")
            LightDriver.max_brightness()
            return
        LightDriver.set_brightness(target_brightness)


    @staticmethod
    def decrease_brightness(degrees):
        target_brightness = LightDriver.get_brightness() - degrees
        if target_brightness < 1:
            click.echo("not allowing < 1 LightDriver brightness")
            LightDriver.min_brightness()
            return
        LightDriver.set_brightness(target_brightness)

    @staticmethod
    def max_brightness():
        LightDriver.set_brightness(100)

    @staticmethod
    def min_brightness():
        LightDriver.set_brightness(1)


class Ddcutil_Driver(BrightnessDriver):
''' ddcutil controls external usb-c display brightness'''
    @staticmethod
    def is_available():
        # TODO: after implementing ddcutil, find a way to see if monitor is attached
        return False

    @staticmethod
    def get_brightness():
        command = "ddcutil --display 1 getvcp 10 --brief"
        ddcutil_response = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE)
        return ddcutil_response.stdout.decode().strip().split()[3]

    @staticmethod
    def set_brightness(target_brightness):
        raise NotImplementedError()
        subprocess.run(["ddcutil", "setvcp", "0x10", target_brightness])

    @staticmethod
    def increase_brightness(degrees):
        target_brightness = Ddcutil_Driver.get_brightness() + degrees
        if target_brightness < 1:
            click.echo("not allowing < 1 ddcutil brightness")
            Ddcutil_Driver.max_brightness()
            return
        Ddcutil_Driver.set_brightness(target_brightness)

    @staticmethod
    def decrease_brightness(degrees):
        current_brightness = Ddcutil_Driver.get_brightness()
        target_brightness = current_brightness - degrees
        if target_brightness < 1
        subprocess.run(["ddcutil", "setvcp", "0x10", target_brightness])

    @staticmethod
    def max_brightness():
        raise NotImplementedError()

    @staticmethod
    def min_brightness():
        raise NotImplementedError()


def get_displays():
    displays = []
    if LightDriver.is_available():
        displays.append(LightDriver)
    if Ddcutil_Driver.is_available():
        displays.append(Ddcutil_Driver)
    return displays

def increase_brightness(degrees):
    for display in get_displays():
        display.increase_brightness(degrees)

def decrease_brightness(degrees):
    for display in get_displays():
        display.decrease_brightness(degrees)


@click.command()
@click.argument('degrees', type=int)
def change_brightness(degrees):
    '''Change Brightness expects brightness increase as a positive integer of degrees or decrease as a negative integer of degrees.'''
    degrees = str(abs(degrees))
    if degrees > 0:
        increase_brightness(degrees)
    else:
        decrease_brightness(degrees)


if __name__ == "__main__":
    change_brightness()
