#!/usr/bin/env python3

from abc import ABC, abstractmethod
import click
import subprocess

DEBUG = True

class BrightnessDriver(ABC):
    @staticmethod
    @abstractmethod
    def is_available():
        raise NotImplementedError()

    @staticmethod
    @abstractmethod
    def get_brightness():
        raise NotImplementedError()

    @staticmethod
    @abstractmethod
    def increase_brightness():
        raise NotImplementedError()

    @staticmethod
    @abstractmethod
    def decrease_brightness():
        raise NotImplementedError()

    @staticmethod
    @abstractmethod
    def max_brightness():
        raise NotImplementedError()

    @staticmethod
    @abstractmethod
    def min_brightness():
        raise NotImplementedError()


class LightDriver(BrightnessDriver):
    @staticmethod
    def is_available():
        return True

    @staticmethod
    def get_brightness():
        degrees = float(subprocess.run(["light"], stdout=subprocess.PIPE).stdout)
        return degrees

    @staticmethod
    def print_brightness():
        degrees = LightDriver.get_brightness()
        click.echo("current brightness {d} degrees".format(d=degrees))

    @staticmethod
    def increase_brightness(degrees):
        degrees = str(abs(degrees))
        if DEBUG:
            click.echo("increasing brightness {d} degrees".format(d=degrees))
        subprocess.run(["light", "-A", str(degrees)])

        if LightDriver.get_brightness() >= 100:
            click.echo("not allowing >= 100 LightDriver brightness")
            LightDriver.max_brightness()

    @staticmethod
    def decrease_brightness(degrees):
        if DEBUG:
            click.echo("lowering LightDriver brightness {d} degrees".format(d=degrees))
        subprocess.run(["light", "-U", degrees])

        if LightDriver.get_brightness() <= 1:
            click.echo("not allowing <= 1 LightDriver brightness")
            LightDriver.min_brightness()

    @staticmethod
    def max_brightness():
        subprocess.run(["light", "-S", "100"])

    @staticmethod
    def min_brightness():
        subprocess.run(["light", "-S", "1"])


class USB_C_DisplayDriver(BrightnessDriver):
    @staticmethod
    def is_available():
        # TODO: after implementing ddcutil, find a way to see if monitor is attached
        return False

    @staticmethod
    def get_brightness():
        raise NotImplementedError()
        # TODO: this isn't enough to get the value
        #   - maybe there's a direct way to import the ddcutil library and run commands directly
        subprocess.run(["sudo", "ddcutil", "getvcp", "0x10"])

    @staticmethod
    def increase_brightness(degrees):
        raise NotImplementedError()
        subprocess.run(["sudo", "ddcutil", "setvcp", "0x10", degrees])

    @staticmethod
    def decrease_brightness(degrees):
        raise NotImplementedError()

    @staticmethod
    def max_brightness():
        raise NotImplementedError()

    @staticmethod
    def min_brightness():
        raise NotImplementedError()


def get_displays():
    displays = []
    if LightDriver.is_available():
        displays.append(LightDriver)
    if USB_C_DisplayDriver.is_available():
        displays.append(USB_C_DisplayDriver)
    return displays

def increase_brightness(degrees):
    for display in get_displays():
        display.increase_brightness(degrees)

def decrease_brightness(degrees):
    for display in get_displays():
        display.decrease_brightness(degrees)


@click.command()
@click.argument('degrees', type=int)
def change_brightness(degrees):
    '''Change Brightness expects brightness increase as a positive integer of degrees or decrease as a negative integer of degrees.'''
    degrees = str(abs(degrees))
    if degrees > 0:
        increase_brightness(degrees)
    else:
        decrease_brightness(degrees)


if __name__ == "__main__":
    change_brightness()
